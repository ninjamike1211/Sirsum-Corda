rain.depth=true
# sun=false
separateAo=true
clouds=off

texture.deferred.colortex9=textures/aonoise.png
texture.composite.colortex9=textures/aonoise.png
# texture.gbuffers.colortex7=textures/waterNormal0.png
# texture.gbuffers.colortex9=textures/waterNormal1.png
#texture.gbuffers.colortex14=textures/skyNight.png
texture.noise=textures/noise.png

blend.gbuffers_block.colortex1=off
blend.gbuffers_entities.colortex1=off
blend.gbuffers_hand_water.colortex1=off
blend.gbuffers_hand.colortex1=off
blend.gbuffers_terrain.colortex1=off
blend.gbuffers_textured_lit.colortex1=off
blend.gbuffers_textured.colortex1=off
blend.gbuffers_water.colortex1=off
blend.gbuffers_weather.colortex1=off
# blend.gbuffers_water=off

# program.gbuffers_skybasic.enabled=false
# program.gbuffers_skytextured.enabled=false

screen = [Depth_of_Field] [Shadows] [Waving_Objects] [SSAO] [Water] [Reflections] [POM] [Debug] bloom Old_Sun Bloom_Threshold Old_Sky Bloom_Amount TAA Fog_Factor Bloom_Spread

screen.Shadows = shadowMapResolution shadowDistance Shadow_Filter Shadow_Distort_Factor Shadow_Bias sunPathRotation Shadow_Blur_Amount Shadow_Darkness Shadow_Transparent Shadow_On_Transparent Shadow_On_Opaque Shadow_Enable
screen.SSAO = SSAO SSAO_Quality SSAO_Radius SSAO_Strength
screen.Waving_Objects = leaves_wave vine_wave grass_wave
screen.Depth_of_Field = dof_enable blurAmount hand_blur water_blur near_blur centerDepthHalflife distance_blur hexagon_blur distance_blur_distance DOF_High_Quality DOF_BlurCoC
screen.Reflections = SSR SSR_Top SSR_Bottom SSR_Rough SSR_Max_Roughness SSR_Multi
screen.POM = POM POM_Depth POM_Layers Water_POM POM_Interpolate POM_PDO
screen.Water = Water_Refraction Water_Refraction_CA Water_Refraction_CA_Amount Water_Refraction_Index Water_POM Water_POM_Resolution Water_Depth Water_POM_Layers Water_Direction Water_Noise Water_Color
screen.Debug = Combine_Normal_Buffers PBR_Lighting viewBuffer

sliders = shadowMapResolution shadowDistance Shadow_Distort_Factor Shadow_Bias sunPathRotation Shadow_Blur_Amount Shadow_Darkness blurAmount centerDepthHalflife distance_blur_distance max_blur SSAO_Radius Bloom_Threshold Bloom_Amount SSAO_Strength SSR_Top SSR_Bottom Water_Refraction_CA_Amount Water_Refraction_Index POM_Depth Water_Depth SSR_Max_Roughness Fog_Factor Bloom_Spread


uniform.bool.inEnd = in(biome_category, CAT_THE_END)

variable.int.adjustedTime = (worldTime + 785) % 24000
uniform.float.timeFactor = if(adjustedTime > 13570, sin((adjustedTime - 3140) * pi / 10430.0), sin(adjustedTime * pi / 13570.0))

variable.int.waterIndex = if(biome_category == CAT_SWAMP, 1, in(biome, BIOME_LUKEWARM_OCEAN, BIOME_DEEP_LUKEWARM_OCEAN), 2, in(biome, BIOME_WARM_OCEAN, BIOME_DEEP_WARM_OCEAN), 3, in(biome, BIOME_COLD_OCEAN, BIOME_DEEP_COLD_OCEAN, BIOME_FROZEN_RIVER, BIOME_FROZEN_OCEAN, BIOME_DEEP_FROZEN_OCEAN), 4, 0)
variable.float.waterR = if(waterIndex == 0, 0.05, waterIndex == 1, 0.24, waterIndex == 2, 0.015, waterIndex == 3, 0.015, 0.05)
variable.float.waterG = if(waterIndex == 0, 0.1, waterIndex == 1, 0.25, waterIndex == 2, 0.086, waterIndex == 3, 0.121, 0.07)
variable.float.waterB = if(waterIndex == 0, 0.25, waterIndex == 1, 0.12, waterIndex == 2, 0.2, waterIndex == 3, 0.2, 0.25)
uniform.vec3.waterColor = vec3(smooth(waterR, 6, 6), smooth(waterG, 6, 6), smooth(waterB, 6, 6))
# uniform.vec3.waterColorSmooth = smooth(1, waterColor, 1, 1)

# uniform.vec3.waterColor = if(biome_category == CAT_SWAMP, vec3(0.0, 0.0, 0.0), if(biome == BIOME_LUKEWARM_OCEAN, vec3(0.1, 0.1, 0.1), if(biome == BIOME_WARM_OCEAN, vec3(0.2, 0.2, 0.2), if(biome == BIOME_COLD_OCEAN, vec3(0.3, 0.3, 0.3), if(biome == BIOME_FROZEN_RIVER, vec3(0.4, 0.4, 0.4), if(biome == BIOME_FROZEN_OCEAN, vec3(0.5, 0.5, 0.5), vec3(1.0, 1.0, 1.0)))))))
# uniform.vec3.waterColor = if(in(biome_category, CAT_SWAMP), vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))
# uniform.vec3.waterColor = vec3(if(biome_category == CAT_SWAMP, 1.0, 0.5), 0.0, 0.0)

#uniform.vec3.topSkyColor = mix(mix(vec3(0.0, 0.01, 0.04), vec3(0.3, 0.5, 0.8), clamp(2.0 * (timeFactor + 0.4), 0.0, 1.0)), mix(vec3(0.2, 0.2, 0.2), vec3(0.45, 0.45, 0.45), clamp(2.0 * (timeFactor + 0.4), 0.0, 1.0)), rainStrength)
#uniform.vec3.bottomSkyColor = mix(mix(vec3(0.06, 0.07, 0.1), mix(vec3(0.75, 0.6, 0.5), vec3(0.6, 0.8, 1.0), clamp(5.0 * (timeFactor - 0.2), 0.0, 1.0)), clamp(2.0 * (timeFactor + 0.4), 0.0, 1.0)), mix(vec3(.15), vec3(0.35), clamp(2.0 * (timeFactor + 0.4), 0.0, 1.0)), rainStrength)
#uniform.vec3.sunColor = return mix(mix(vec3(0.9, 0.4, 0.1), vec3(1.0, 0.6, 0.2), clamp(4.0 * (timeFactor + 0.05), 0.0, 1.0)), vec3(0.5, 0.45, 0.35), rainStrength)
#uniform.vec3.sunBlurColor = mix(mix(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0), 1.0 - clamp(5.0 * (timeFactor - 0.2), 0.0, 1.0)), vec3(0.5), rainStrength)
#uniform.vec3.skyLightColor = mix(mix(vec3(0.06, 0.06, 0.14), vec3(0.08), rainStrength), mix(mix(vec3(1.0, 0.6, 0.4), vec3(1.5, 1.5, 1.2), clamp(5.0 * (timeFactor - 0.2), 0.0, 1.0)), vec3(0.3), rainStrength), clamp(2.0 * (timeFactor + 0.4), 0.0, 1.0))
